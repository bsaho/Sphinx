{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/bsaho/Documents/GitHub/Sphinx/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/bsaho/Documents/GitHub/Sphinx/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\bsaho\\\\Documents\\\\GitHub\\\\Sphinx\\\\client\\\\src\\\\Shelf.js\";\nimport React, { Component } from 'react';\nimport \"./table.css\";\nimport ReactModal from 'react-modal';\nimport MyModal from \"./Modal\";\nimport Collapsible from 'react-collapsible';\nimport LazyLoad from \"react-lazyload\";\nimport placeHolder from \"./nocoverimage.jpg\";\n\nclass Shelf extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.getNoteData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n        var response, body;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/notespec', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  post: name.target.value\n                })\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              _this.setState({\n                notes: body.highlights\n              });\n\n              _this.setState({\n                currName: body.title\n              }); //  console.log (body);\n\n\n              _this.handleOpenModal();\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.getDetails = title => {\n      //get notes\n      //if notes don't exist say so\n      //populate modal.\n      //show modal\n      console.log(title);\n    };\n\n    this.getBookCover = url => {\n      const cover = new Image();\n      cover.src = url;\n\n      if (cover.naturalHeight > 1) {\n        console.log(\"Image good\");\n        return url;\n      } else {\n        console.log(\"Image bad, using placeholder\");\n        return placeHolder;\n      }\n    };\n\n    this.state = {\n      currName: '',\n      books: [],\n      showModal: false,\n      currName: ''\n    };\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n  }\n\n  handleOpenModal() {\n    this.setState({\n      showModal: true\n    });\n  }\n\n  handleCloseModal() {\n    this.setState({\n      showModal: false\n    });\n  }\n\n  renderShelfData() {\n    console.log(this.props.shelfData);\n\n    if (typeof this.props.shelfData !== \"undefined\") {\n      const smallSlice = this.props.shelfData.slice(0, 11);\n      return smallSlice.map((student, index) => {\n        const title = student.title,\n              author = student.author,\n              googleData = student.googleData,\n              isbn = student.isbn; //destructuring\n\n        const cover = this.getBookCover(googleData);\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"thumb\",\n          src: cover,\n          onClick: this.getDetails,\n          value: title\n        }, isbn, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 14\n        }, this);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Book Gallery\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"title\",\n        children: \"Bookshelf \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), this.renderShelfData()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Shelf;","map":{"version":3,"sources":["C:/Users/bsaho/Documents/GitHub/Sphinx/client/src/Shelf.js"],"names":["React","Component","ReactModal","MyModal","Collapsible","LazyLoad","placeHolder","Shelf","constructor","props","getNoteData","name","fetch","method","headers","body","JSON","stringify","post","target","value","response","json","setState","notes","highlights","currName","title","handleOpenModal","getDetails","console","log","getBookCover","url","cover","Image","src","naturalHeight","state","books","showModal","bind","handleCloseModal","renderShelfData","shelfData","smallSlice","slice","map","student","index","author","googleData","isbn","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./table.css\"\r\nimport ReactModal from 'react-modal';\r\nimport MyModal from \"./Modal\";\r\nimport Collapsible from 'react-collapsible';\r\nimport LazyLoad from \"react-lazyload\";\r\nimport placeHolder from \"./nocoverimage.jpg\"\r\nclass Shelf extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        \r\n        super(props)\r\n        this.state = {\r\n            currName : '',\r\n            books: [],\r\n            showModal : false,\r\n            currName: ''\r\n\r\n        }\r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    \r\n    }\r\n\r\n    handleOpenModal () {\r\n        this.setState({ showModal: true });\r\n      }\r\n      \r\n      handleCloseModal () {\r\n        this.setState({ showModal: false });\r\n      }\r\n      getNoteData = async name => {\r\n\r\n        const response = await  fetch('/api/notespec', {\r\n           method: 'POST',\r\n           headers: {\r\n             'Content-Type': 'application/json',\r\n           },\r\n           body: JSON.stringify({ post: name.target.value }),\r\n         });\r\n         const body = await  response.json();\r\n         this.setState ({ notes: body.highlights});\r\n         this.setState({currName: body.title});\r\n        //  console.log (body);\r\n         this.handleOpenModal ();\r\n        \r\n        \r\n      }  \r\n\r\n      getDetails  = title =>{\r\n\r\n        //get notes\r\n\r\n        //if notes don't exist say so\r\n\r\n        //populate modal.\r\n\r\n        //show modal\r\n        console.log (title);\r\n\r\n      }\r\n  \r\n\r\n      \r\n      getBookCover =  url =>{\r\n        const cover = new Image ();\r\n        cover.src = url;\r\n        \r\n        if (cover.naturalHeight>1) {\r\n            console.log (\"Image good\");\r\n            return url;\r\n        }\r\n        else {\r\n            console.log (\"Image bad, using placeholder\");\r\n            return placeHolder;\r\n        }\r\n       \r\n\r\n      }\r\n\r\n    \r\n  \r\n    renderShelfData() {\r\n        console.log (this.props.shelfData);\r\n        if (typeof this.props.shelfData !==\"undefined\"){\r\n            const smallSlice = this.props.shelfData.slice (0,11);\r\n        return smallSlice.map((student, index) => {\r\n           const { title, author, googleData, isbn } = student //destructuring\r\n           const cover= this.getBookCover (googleData);\r\n            \r\n           return (\r\n             <img className=\"thumb\" key={isbn} src={cover} onClick={this.getDetails} value={title} />\r\n           )\r\n        })}\r\n     }\r\n \r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div className=\"Book Gallery\" > \r\n                <h1 id='title'>Bookshelf </h1>\r\n                {this.renderShelfData ()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Shelf;\r\n\r\n"]},"metadata":{},"sourceType":"module"}